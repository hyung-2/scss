$orange : orange;
$red : red;
$blue : blue;
$yellow : yellow;
$name-color : white;

$default-width:100px;
$default-height:50px;
$default-font-size:20px;

@mixin  border ($style) {
  border-style: $style; 
}

@mixin captionSytle($bg, $tc, $bt){
  background-color: $bg;
  color: $tc;
  @include border($bt);
}

.background{
  // background-color: $orange;

  width: $default-width * 3;
  height: $default-height * 2;
  font-size: $default-font-size - 5px;

  margin: $default-width auto;
  text-align: center;

  //가로정렬
  display: flex;
  justify-content: center;
  align-items: center;

  .photo-box{
    // border: 1px solid $orange;
    padding-left: 10px;
    
    .photo{
      width: $default-width * 3;
      height: $default-height * 6;
      overflow: hidden;

      img{
        width: 100%; height: 100%;
      }
    }
    .name{
      font-size: $default-font-size - 5px;
      font-weight: bold;
      padding-top: 10px;

      &.red{
        @include captionSytle($red,$name-color, dotted)
        // background-color: $red;
        // color: $name-color;
        // @include border(dotted); //보더 스타일을 dotted로
      }
      &.blue{
        @include captionSytle($blue,$name-color, dashed solid)

        // background-color: $blue;
        // color: $name-color;
        // @include border(dashed solid);
      }
      &.yellow{
        @include captionSytle($yellow,$name-color, groove)

      //   background-color: $yellow;
      //   color: $name-color;
      //   @include border(groove);
      }
    }
  }
}

//-------------------------------------------------------------------------------------------

@use "sass:color"; //색상에 관련된 내장 모듈 불러오기

$default-width:100px;
$default-height:50px;
$primary:orange;

.background{
  width: 100%; height: 100vh;

  display: flex;
  justify-content: center;
  align-items: center;

  .dark-btn{
    width: $default-width;
    height: $default-height;
    background-color: $primary;
    cursor: pointer;
    border: none;
    border-radius: 5px;

    &:hover{
      // background-color: darken($primary, 20%); //dakren이라는 내장모듈을 $primary색으로 20%정도만
      // background-color: grayscale($primary); //회색으로
      background-color: invert($primary); //색상반전(보색)
    }
  } 
}

//-------------------------------------------------------------------------------------------
/* list - 특정값을 추가하는 함수*/
@use "sass:list";
$fruits : "apple", "banana", "orange"; //리스트 정의

.background {
  width: 100%; height: 100vh;

  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;

  .fruit{
    background-color: black;
    color: white;
    margin-top:  10px;
    padding: 10px;
    width: 100px;
    
    $fruits: list.append($fruits, "mango");

    @each $name in $fruits {
      &.#{$name}::after{
        content: $name;
        font-size: 20px;
      }
    }
  }
}

//-------------------------------------------------------------------------------------------
// index - list에서 index값 반환
@use "sass:list";
//  전역 변수
$fruits : "apple", "banana", "orange", "watermelon"; 
$fruits-colors : red, yellow, orange, green;
.background {
  width: 100%; height: 100vh;

  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;

  .fruit{
    background-color: black;
    color: white;
    margin-top:  10px;
    padding: 10px;
    width: 150px;
    font-weight: bold;

    @each $name in $fruits{ 
      // $index : 지역변수, css는 1부터 시작
      $index: list.index($fruits, $name); //특정 element의 인덱스값 조회. fruits의 인덱스값

      &:nth-child(#{$index})::after{
        content:$name;
        font-size: 20px;
      }
      &:nth-child(#{$index}) {
        background-color: list.nth($fruits-colors, $index) // list.nth(리스트,인덱스에 해당하는 값)
      }
    }
  }
}

//-------------------------------------------------------------------------------------------
//join - 두개의 list를 하나로 결합

@use "sass:list";

$fruitsA : "apple", "banana", "orange", "watermelon"; 
$fruitsB : "watermelon", "strawberry", "raspberry";
$fruits: list.join($fruitsA, $fruitsB);

.background {
  width: 100%; height: 100vh;

  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;

  .fruit{
    background-color: black;
    color: white;
    margin-top:  10px;
    padding: 10px;
    width: 150px;
    font-weight: bold;

    @each $name in $fruits {
      &.#{$name}{
        width: 50px * list.length($fruits);
      }
      &.#{$name}::after{
        content: $name;
      }
    }

  }
}

//-------------------------------------------------------------------------------------------
/*map -Map 내장 함수는 기존 Map 데이터를 갱신하지 않고 새 Map 데이터를 반환 */
//get - 서 특정 key가 존재한다면 key의 value를 반환하는 함수
//has-key 함수는 map에서 특정 key가 존재한다면 true 없다면 false를 반환하는 포함여부를 판단하는 함수

@use "sass:map";

//버튼 스타일을 Map 객체로 정의 (키 : 값)
$btn-style:(
  icon-url : "http://simpleicon.com/wp-content/uploads/rocket.png",
  background-color : brown,
  hover-color : yellow,
  cursor : pointer,
  padding : 10px,
  border-radius : 10px,
  border : none,
  btn-size : "large",
  font-size : 20px,
  default-width : 50px,
  default-height : 50px
);

//중앙정렬은 자주 사용하므로 믹스인으로 정의
@mixin alignCenter() {
  display: flex;
  justify-content: center;
  align-items: center;
}

//버튼 크기 설정하는 믹스인
@mixin sizeOfButton($btn-obj){
  height: map.get($btn-obj, default-height) * 2; 

  @if(map.has-key($btn-obj, btn-size) //btn-size가 있는지 확인
  and map.get($btn-obj, btn-size) == "large"){ //확인후 btn-size가 large이면
    width: map.get($btn-obj, default-width) * 6; //width는 map에있는 default-width의 *6 값이다
  }@else if(map.has-key($btn-obj, btn-size)
  and map.get($btn-obj, btn-size) == "medium"){
    width: map.get($btn-obj, default-width) * 4;
  }@else if(map.has-key($btn-obj, btn-size)
  and map.get($btn-obj, btn-size) == "small"){
    width: map.get($btn-obj, default-width) * 2;
  }
}

.checkin-btn {
  @include alignCenter(); //중앙정렬
  @include sizeOfButton($btn-style); //버튼 크기 설정
  margin: map.get($btn-style, default-height) *2 auto ;

  //나머지 속성 설정
  @each $key,$value in $btn-style {
    #{$key}:$value;
  }
  &:hover{
    background-color: map.get($btn-style, hover-color);
  }
  //아이콘 스타일 설정
  .bg-img{
    background-image: url(map.get($btn-style, icon-url)), no-repeat ;
    background-size: cover;
    width: map.get($btn-style, default-width);
    height: map.get($btn-style, default-height);
  }
}

//-------------------------------------------------------------------------------------------

@use "sass:map";
$books : (
  harry-potter : "Harry",
  spiderman : "Spider",
  ironman : "Iron"
);

$default-width: 50px;
$default-height: 50px;
$default-margin: 10px;

@mixin setStyles($className, $num ,$bgcolor){
  .#{$className}{
    width: $default-width * $num;
    height: $default-height * $num;
    margin: $default-margin;
    background-color: $bgcolor;
    }
    .#{$className}::after{
      content: "#{$className}";
      color: white;
      font-size: 20px;
    }
}

.background{
  display: flex;
  justify-content: center;
  align-items: center;

  @each $key in map.keys($books) {
    @include setStyles($key, 2, skyblue);
    // .#{$key}{
    // width: $default-width * 2;
    // height: $default-height * 2;
    // margin: $default-margin;
    // background-color: aqua;
    // }
    // .#{$key}::after{
    //   content: "#{$key}";
    //   color: white;
    //   font-size: 20px;
    // }
  }

  @each $value in map.values($books) {
    @include setStyles($value, 4, firebrick);
    // .#{$value}{
    //   width: $default-width * 4;
    //   height: $default-height * 4;
    //   margin: $default-margin;
    //   background-color: firebrick;
    // }
    // .#{$value}::after{
    //   content: "#{$value}";
    //   color: white;
    //   font-size: 20px;
    // }
  
  }
}